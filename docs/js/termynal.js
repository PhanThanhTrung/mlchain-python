"use strict"; class Termynal { constructor(t = "#termynal", e = {}) { this.container = "string" == typeof t ? document.querySelector(t) : t, this.pfx = `data-${e.prefix || "ty"}`, this.originalStartDelay = this.startDelay = e.startDelay || parseFloat(this.container.getAttribute(`${this.pfx}-startDelay`)) || 600, this.originalTypeDelay = this.typeDelay = e.typeDelay || parseFloat(this.container.getAttribute(`${this.pfx}-typeDelay`)) || 90, this.originalLineDelay = this.lineDelay = e.lineDelay || parseFloat(this.container.getAttribute(`${this.pfx}-lineDelay`)) || 1500, this.progressLength = e.progressLength || parseFloat(this.container.getAttribute(`${this.pfx}-progressLength`)) || 40, this.progressChar = e.progressChar || this.container.getAttribute(`${this.pfx}-progressChar`) || "█", this.progressPercent = e.progressPercent || parseFloat(this.container.getAttribute(`${this.pfx}-progressPercent`)) || 100, this.cursor = e.cursor || this.container.getAttribute(`${this.pfx}-cursor`) || "▋", this.lineData = this.lineDataToElements(e.lineData || []), this.loadLines(), e.noInit || this.init() } loadLines() { const t = this.generateFinish(); t.style.visibility = "hidden", this.container.appendChild(t), this.lines = [...this.container.querySelectorAll(`[${this.pfx}]`)].concat(this.lineData); for (let t of this.lines) t.style.visibility = "hidden", this.container.appendChild(t); const e = this.generateRestart(); e.style.visibility = "hidden", this.container.appendChild(e), this.container.setAttribute("data-termynal", "") } init() { const t = getComputedStyle(this.container); this.container.style.width = "0px" !== t.width ? t.width : void 0, this.container.style.minHeight = "0px" !== t.height ? t.height : void 0, this.container.setAttribute("data-termynal", ""), this.container.innerHTML = ""; for (let t of this.lines) t.style.visibility = "visible"; this.start() } async start() { this.addFinish(), await this._wait(this.startDelay); for (let t of this.lines) { const e = t.getAttribute(this.pfx), i = t.getAttribute(`${this.pfx}-delay`) || this.lineDelay; "input" == e ? (t.setAttribute(`${this.pfx}-cursor`, this.cursor), await this.type(t), await this._wait(i)) : "progress" == e ? (await this.progress(t), await this._wait(i)) : (this.container.appendChild(t), await this._wait(i)), t.removeAttribute(`${this.pfx}-cursor`) } this.addRestart(), this.finishElement.style.visibility = "hidden", this.lineDelay = this.originalLineDelay, this.typeDelay = this.originalTypeDelay, this.startDelay = this.originalStartDelay } generateRestart() { const t = document.createElement("a"); return t.onclick = (t => { t.preventDefault(), this.container.innerHTML = "", this.init() }), t.href = "#", t.setAttribute("data-terminal-control", ""), t.innerHTML = "restart ↻", t } generateFinish() { const t = document.createElement("a"); return t.onclick = (t => { t.preventDefault(), this.lineDelay = 0, this.typeDelay = 0, this.startDelay = 0 }), t.href = "#", t.setAttribute("data-terminal-control", ""), t.innerHTML = "fast →", this.finishElement = t, t } addRestart() { const t = this.generateRestart(); this.container.appendChild(t) } addFinish() { const t = this.generateFinish(); this.container.appendChild(t) } async type(t) { const e = [...t.textContent]; t.textContent = "", this.container.appendChild(t); for (let i of e) { const e = t.getAttribute(`${this.pfx}-typeDelay`) || this.typeDelay; await this._wait(e), t.textContent += i } } async progress(t) { const e = t.getAttribute(`${this.pfx}-progressLength`) || this.progressLength, i = (t.getAttribute(`${this.pfx}-progressChar`) || this.progressChar).repeat(e), s = t.getAttribute(`${this.pfx}-progressPercent`) || this.progressPercent; t.textContent = "", this.container.appendChild(t); for (let e = 1; e < i.length + 1; e++) { await this._wait(this.typeDelay); const r = Math.round(e / i.length * 100); if (t.textContent = `${i.slice(0, e)} ${r}%`, r > s) break } } _wait(t) { return new Promise(e => setTimeout(e, t)) } lineDataToElements(t) { return t.map(t => { let e = document.createElement("div"); return e.innerHTML = `<span ${this._attributes(t)}>${t.value || ""}</span>`, e.firstElementChild }) } _attributes(t) { let e = ""; for (let i in t) "class" !== i ? "type" === i ? e += `${this.pfx}="${t[i]}" ` : "value" !== i && (e += `${this.pfx}-${i}="${t[i]}" `) : e += ` class=${t[i]} `; return e } } if (document.currentScript.hasAttribute("data-termynal-container")) { document.currentScript.getAttribute("data-termynal-container").split("|").forEach(t => new Termynal(t)) }